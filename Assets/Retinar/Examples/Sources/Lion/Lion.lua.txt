local util = require 'xlua.util'

local UnityEngine =                         CS.UnityEngine
local WidgetsManager =                      CS.Samuel.Widgets.WidgetsManager
local Vector3 =                             CS.UnityEngine.Vector3
local Ease =                                CS.DG.Tweening.Ease
local ButtonClickedEvent =                  CS.UnityEngine.UI.Button.ButtonClickedEvent

-- 编辑模式(通常用来限制交互触发)
local IsEditMode =                          (WidgetsManager ~= nil and WidgetsManager.Instance ~= nil and WidgetsManager.Instance.IsEditMode ~= nil and WidgetsManager.Instance.IsEditMode == true) and true or false


function Awake()
    print("lua Awake...")
end

function Start()
    print("lua Start...")
    RegisterButton(button,Reset)
end

function Update()
    -- Mouse0: The Left (or primary) mouse button.
    -- Lua API: https://github.com/Tencent/xLua/blob/master/Assets/XLua/Doc/XLua_API.md
    -- CS.namespace.class(...)
    if not IsEditMode and UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode.Mouse0) then
        --UnityEngine.Camera.main: The first enabled Camera component that is tagged "MainCamera" (Read Only). If there is no enabled Camera component with the "MainCamera" tag, this property is null.
        -- Camera.ScreenPointToRay: https://docs.unity3d.com/ScriptReference/Camera.ScreenPointToRay.html, Returns a ray going from camera through a screen point.Resulting ray is in world space, starting on the near plane of the camera and going through position's (x,y) pixel coordinates on the screen (position.z is ignored).
        local ray = UnityEngine.Camera.main:ScreenPointToRay (UnityEngine.Input.mousePosition)
        --返回所有hits点: https://docs.unity3d.com/ScriptReference/Physics.RaycastAll.html
        
        local hits = UnityEngine.Physics.RaycastAll(ray)

        if hits.Length > 0 then

            for i = 0, hits.Length-1 do
                -- 获取到所有射到的碰撞体对应游戏物体的名字
                -- print(hits[i].collider.gameObject.name)
                -- hitObj, 碰撞的物体
                local hitObj = hits[i].collider.gameObject

                if hitObj == target then
                    -- Trigger：当被过渡使用时，由控制器重置的布尔值参数（以圆形按钮表示）可使用以下 Animator 类中的SetTrigger 和 ResetTrigger从脚本为参数赋值
                    animator:SetTrigger('SayHi')
                    -- 设置完trigger之后，会从anystate转换到Hi，然后Hi上面挂了一个动画，就会打招呼，招呼打完了之后回到Idle状态；
                    -- 此外，运行后，默认的是进入Idle状态
                    break
                end
            end
        end
    end
end

function OnEnable()
    print("lua OnEnable...")
    Reset()
end

function OnDisable()
    print("lua OnDisable...")

end

function OnDestroy()
    print("lua OnDestroy")
end

function Reset ()
    -- DoTween
    animator.transform.localScale = Vector3.zero
    animator.transform:DOScale(Vector3.one * 2, .5):SetEase(Ease.OutBounce):SetDelay(1)
    tip.transform.localScale = Vector3.zero
    tip.transform:DOScale(Vector3.one * .002, .3):SetEase(Ease.OutBounce):SetDelay(1.4)
    text.DOText("YYY",2); -- 表示在2秒内显示参数内文本(打字机效果)
end

-- UGUI按钮注册
function RegisterButton ( button,func )
    -- body
    local bce = ButtonClickedEvent()
    bce:AddListener(func)
    button.onClick = bce
end
